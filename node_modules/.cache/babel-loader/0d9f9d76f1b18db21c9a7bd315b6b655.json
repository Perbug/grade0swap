{"ast":null,"code":"import _objectSpread from\"/Users/xcodedeveloper/Desktop/grade0swap/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/xcodedeveloper/Desktop/grade0swap/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect}from\"react\";import{Container,Grid,IconButton,makeStyles,Paper,Typography}from\"@material-ui/core\";import SwapVerticalCircleIcon from\"@material-ui/icons/SwapVerticalCircle\";import{useSnackbar}from\"notistack\";import LoopIcon from\"@material-ui/icons/Loop\";import{getAccount,getFactory,getProvider,getRouter,getSigner,getNetwork,getAmountOut,getBalanceAndSymbol,getWeth,swapTokens,getReserves}from\"../ethereumFunctions\";import CoinField from\"./CoinField\";import CoinDialog from\"./CoinDialog\";import LoadingButton from\"../Components/LoadingButton\";import WrongNetwork from\"../Components/wrongNetwork\";import COINS from\"../constants/coins\";import*as chains from\"../constants/chains\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var styles=function styles(theme){return{paperContainer:{borderRadius:theme.spacing(2),padding:theme.spacing(1),paddingBottom:theme.spacing(3),backgroundColor:\"rgba(102, 16, 242, 1.0)\"},switchButton:{zIndex:1,margin:\"-16px\",padding:theme.spacing(0.5)},fullWidth:{width:\"100%\"},title:{textAlign:\"center\",padding:theme.spacing(0.5),marginBottom:theme.spacing(1),color:\"#fff\",fontWeight:'900',fontSize:'48px'},hr:{width:\"100%\"},balance:{padding:theme.spacing(1),overflow:\"wrap\",textAlign:\"center\"},footer:{marginTop:\"285px\"}};};var useStyles=makeStyles(styles);function CoinSwapper(props){var classes=useStyles();var _useSnackbar=useSnackbar(),enqueueSnackbar=_useSnackbar.enqueueSnackbar;// Stores a record of whether their respective dialog window is open\nvar _React$useState=React.useState(false),_React$useState2=_slicedToArray(_React$useState,2),dialog1Open=_React$useState2[0],setDialog1Open=_React$useState2[1];var _React$useState3=React.useState(false),_React$useState4=_slicedToArray(_React$useState3,2),dialog2Open=_React$useState4[0],setDialog2Open=_React$useState4[1];var _React$useState5=React.useState(false),_React$useState6=_slicedToArray(_React$useState5,2),wrongNetworkOpen=_React$useState6[0],setwrongNetworkOpen=_React$useState6[1];// Stores data about their respective coin\nvar _React$useState7=React.useState({address:undefined,symbol:undefined,balance:undefined}),_React$useState8=_slicedToArray(_React$useState7,2),coin1=_React$useState8[0],setCoin1=_React$useState8[1];var _React$useState9=React.useState({address:undefined,symbol:undefined,balance:undefined}),_React$useState10=_slicedToArray(_React$useState9,2),coin2=_React$useState10[0],setCoin2=_React$useState10[1];// Stores the current reserves in the liquidity pool between coin1 and coin2\nvar _React$useState11=React.useState([\"0.0\",\"0.0\"]),_React$useState12=_slicedToArray(_React$useState11,2),reserves=_React$useState12[0],setReserves=_React$useState12[1];// Stores the current value of their respective text box\nvar _React$useState13=React.useState(\"\"),_React$useState14=_slicedToArray(_React$useState13,2),field1Value=_React$useState14[0],setField1Value=_React$useState14[1];var _React$useState15=React.useState(\"\"),_React$useState16=_slicedToArray(_React$useState15,2),field2Value=_React$useState16[0],setField2Value=_React$useState16[1];// Controls the loading button\nvar _React$useState17=React.useState(false),_React$useState18=_slicedToArray(_React$useState17,2),loading=_React$useState18[0],setLoading=_React$useState18[1];// Switches the top and bottom coins, this is called when users hit the swap button or select the opposite\n// token in the dialog (e.g. if coin1 is TokenA and the user selects TokenB when choosing coin2)\nvar switchFields=function switchFields(){setCoin1(coin2);setCoin2(coin1);setField1Value(field2Value);setReserves(reserves.reverse());};// These functions take an HTML event, pull the data out and puts it into a state variable.\nvar handleChange={field1:function field1(e){setField1Value(e.target.value);}};// Turns the account's balance into something nice and readable\nvar formatBalance=function formatBalance(balance,symbol){if(balance&&symbol)return parseFloat(balance).toPrecision(8)+\" \"+symbol;else return\"0.0\";};// Turns the coin's reserves into something nice and readable\nvar formatReserve=function formatReserve(reserve,symbol){if(reserve&&symbol)return reserve+\" \"+symbol;else return\"0.0\";};// Determines whether the button should be enabled or not\nvar isButtonEnabled=function isButtonEnabled(){// If both coins have been selected, and a valid float has been entered which is less than the user's balance, then return true\nvar parsedInput1=parseFloat(field1Value);var parsedInput2=parseFloat(field2Value);return coin1.address&&coin2.address&&!isNaN(parsedInput1)&&!isNaN(parsedInput2)&&0<parsedInput1&&parsedInput1<=coin1.balance;};// Called when the dialog window for coin1 exits\nvar onToken1Selected=function onToken1Selected(address){// Close the dialog window\nsetDialog1Open(false);// If the user inputs the same token, we want to switch the data in the fields\nif(address===coin2.address){switchFields();}// We only update the values if the user provides a token\nelse if(address){// Getting some token data is async, so we need to wait for the data to return, hence the promise\ngetBalanceAndSymbol(props.network.account,address,props.network.provider,props.network.signer,props.network.weth.address,props.network.coins).then(function(data){setCoin1({address:address,symbol:data.symbol,balance:data.balance});});}};// Called when the dialog window for coin2 exits\nvar onToken2Selected=function onToken2Selected(address){// Close the dialog window\nsetDialog2Open(false);// If the user inputs the same token, we want to switch the data in the fields\nif(address===coin1.address){switchFields();}// We only update the values if the user provides a token\nelse if(address){// Getting some token data is async, so we need to wait for the data to return, hence the promise\ngetBalanceAndSymbol(props.network.account,address,props.network.provider,props.network.signer,props.network.weth.address,props.network.coins).then(function(data){setCoin2({address:address,symbol:data.symbol,balance:data.balance});});}};// Calls the swapTokens Ethereum function to make the swap, then resets nessicary state variables\nvar swap=function swap(){console.log(\"Attempting to swap tokens...\");setLoading(true);swapTokens(coin1.address,coin2.address,field1Value,props.network.router,props.network.account,props.network.signer).then(function(){setLoading(false);// If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\nsetField1Value(\"\");enqueueSnackbar(\"Transaction Successful\",{variant:\"success\"});}).catch(function(e){setLoading(false);enqueueSnackbar(\"Transaction Failed (\"+e.message+\")\",{variant:\"error\",autoHideDuration:10000});});};// The lambdas within these useEffects will be called when a particular dependency is updated. These dependencies\n// are defined in the array of variables passed to the function after the lambda expression. If there are no dependencies\n// the lambda will only ever be called when the component mounts. These are very useful for calculating new values\n// after a particular state change, for example, calculating the new exchange rate whenever the addresses\n// of the two coins change.\n// This hook is called when either of the state variables `coin1.address` or `coin2.address` change.\n// This means that when the user selects a different coin to convert between, or the coins are swapped,\n// the new reserves will be calculated.\nuseEffect(function(){console.log(\"Trying to get Reserves between:\\n\"+coin1.address+\"\\n\"+coin2.address);if(coin1.address&&coin2.address){getReserves(coin1.address,coin2.address,props.network.factory,props.network.signer,props.network.account).then(function(data){return setReserves(data);});}},[coin1.address,coin2.address,props.network.account,props.network.factory,props.network.router,props.network.signer]);// This hook is called when either of the state variables `field1Value` `coin1.address` or `coin2.address` change.\n// It attempts to calculate and set the state variable `field2Value`\n// This means that if the user types a new value into the conversion box or the conversion rate changes,\n// the value in the output box will change.\nuseEffect(function(){if(isNaN(parseFloat(field1Value))){setField2Value(\"\");}else if(parseFloat(field1Value)&&coin1.address&&coin2.address){getAmountOut(coin1.address,coin2.address,field1Value,props.network.router,props.network.signer).then(function(amount){return setField2Value(amount.toFixed(7));}).catch(function(e){console.log(e);setField2Value(\"NA\");});}else{setField2Value(\"\");}},[field1Value,coin1.address,coin2.address]);// This hook creates a timeout that will run every ~10 seconds, it's role is to check if the user's balance has\n// updated has changed. This allows them to see when a transaction completes by looking at the balance output.\nuseEffect(function(){var coinTimeout=setTimeout(function(){console.log('props: ',props);console.log(\"Checking balances...\");if(coin1.address&&coin2.address&&props.network.account){getReserves(coin1.address,coin2.address,props.network.factory,props.network.signer,props.network.account).then(function(data){return setReserves(data);});}if(coin1.address&&props.network.account&&!wrongNetworkOpen){getBalanceAndSymbol(props.network.account,coin1.address,props.network.provider,props.network.signer,props.network.weth.address,props.network.coins).then(function(data){setCoin1(_objectSpread(_objectSpread({},coin1),{},{balance:data.balance}));});}if(coin2.address&&props.network.account&&!wrongNetworkOpen){getBalanceAndSymbol(props.network.account,coin2.address,props.network.provider,props.network.signer,props.network.weth.address,props.network.coins).then(function(data){setCoin2(_objectSpread(_objectSpread({},coin2),{},{balance:data.balance}));});}},10000);return function(){return clearTimeout(coinTimeout);};});return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(CoinDialog,{open:dialog1Open,onClose:onToken1Selected,coins:props.network.coins,props:props.network.signer}),/*#__PURE__*/_jsx(CoinDialog,{open:dialog2Open,onClose:onToken2Selected,coins:props.network.coins,signer:props.network.signer}),/*#__PURE__*/_jsx(WrongNetwork,{open:wrongNetworkOpen}),/*#__PURE__*/_jsx(Container,{maxWidth:\"xs\",children:/*#__PURE__*/_jsxs(Paper,{className:classes.paperContainer,children:[/*#__PURE__*/_jsx(Typography,{variant:\"h5\",className:classes.title,children:\"Swap Coins\"}),/*#__PURE__*/_jsxs(Grid,{container:true,direction:\"column\",alignItems:\"center\",spacing:2,children:[/*#__PURE__*/_jsx(Grid,{item:true,xs:12,className:classes.fullWidth,children:/*#__PURE__*/_jsx(CoinField,{activeField:true,value:field1Value,onClick:function onClick(){return setDialog1Open(true);},onChange:handleChange.field1,symbol:coin1.symbol!==undefined?coin1.symbol:\"Select\"})}),/*#__PURE__*/_jsx(IconButton,{onClick:switchFields,className:classes.switchButton,children:/*#__PURE__*/_jsx(SwapVerticalCircleIcon,{fontSize:\"medium\",className:\"swapperButton\"})}),/*#__PURE__*/_jsx(Grid,{item:true,xs:12,className:classes.fullWidth,children:/*#__PURE__*/_jsx(CoinField,{activeField:false,value:field2Value,onClick:function onClick(){return setDialog2Open(true);},symbol:coin2.symbol!==undefined?coin2.symbol:\"Select\"})}),/*#__PURE__*/_jsx(\"hr\",{className:classes.hr}),/*#__PURE__*/_jsx(Typography,{variant:\"h6\",className:\"balanceHeading\",children:\"Your Balances\"}),/*#__PURE__*/_jsxs(Grid,{container:true,direction:\"row\",justifyContent:\"space-between\",children:[/*#__PURE__*/_jsx(Grid,{item:true,xs:6,children:/*#__PURE__*/_jsx(Typography,{variant:\"body1\",className:\"\".concat(classes.balance,\" balance-text\"),children:formatBalance(coin1.balance,coin1.symbol)})}),/*#__PURE__*/_jsx(Grid,{item:true,xs:6,children:/*#__PURE__*/_jsx(Typography,{variant:\"body1\",className:\"\".concat(classes.balance,\" balance-text\"),children:formatBalance(coin2.balance,coin2.symbol)})})]}),/*#__PURE__*/_jsx(\"hr\",{className:classes.hr}),/*#__PURE__*/_jsx(Typography,{variant:\"h6\",className:\"balanceHeading\",children:\"Reserves\"}),/*#__PURE__*/_jsxs(Grid,{container:true,direction:\"row\",justifyContent:\"space-between\",children:[/*#__PURE__*/_jsx(Grid,{item:true,xs:6,children:/*#__PURE__*/_jsx(Typography,{variant:\"body1\",className:\"\".concat(classes.balance,\" balance-text\"),children:formatReserve(reserves[0],coin1.symbol)})}),/*#__PURE__*/_jsx(Grid,{item:true,xs:6,children:/*#__PURE__*/_jsx(Typography,{variant:\"body1\",className:\"\".concat(classes.balance,\" balance-text\"),children:formatReserve(reserves[1],coin2.symbol)})})]}),/*#__PURE__*/_jsx(\"hr\",{className:classes.hr}),/*#__PURE__*/_jsxs(LoadingButton,{loading:loading,valid:isButtonEnabled(),success:false,fail:false,onClick:swap,children:[/*#__PURE__*/_jsx(LoopIcon,{}),\"Swap\"]})]})]})})]});}export default CoinSwapper;","map":{"version":3,"sources":["/Users/xcodedeveloper/Desktop/grade0swap/src/CoinSwapper/CoinSwapper.js"],"names":["React","useEffect","Container","Grid","IconButton","makeStyles","Paper","Typography","SwapVerticalCircleIcon","useSnackbar","LoopIcon","getAccount","getFactory","getProvider","getRouter","getSigner","getNetwork","getAmountOut","getBalanceAndSymbol","getWeth","swapTokens","getReserves","CoinField","CoinDialog","LoadingButton","WrongNetwork","COINS","chains","styles","theme","paperContainer","borderRadius","spacing","padding","paddingBottom","backgroundColor","switchButton","zIndex","margin","fullWidth","width","title","textAlign","marginBottom","color","fontWeight","fontSize","hr","balance","overflow","footer","marginTop","useStyles","CoinSwapper","props","classes","enqueueSnackbar","useState","dialog1Open","setDialog1Open","dialog2Open","setDialog2Open","wrongNetworkOpen","setwrongNetworkOpen","address","undefined","symbol","coin1","setCoin1","coin2","setCoin2","reserves","setReserves","field1Value","setField1Value","field2Value","setField2Value","loading","setLoading","switchFields","reverse","handleChange","field1","e","target","value","formatBalance","parseFloat","toPrecision","formatReserve","reserve","isButtonEnabled","parsedInput1","parsedInput2","isNaN","onToken1Selected","network","account","provider","signer","weth","coins","then","data","onToken2Selected","swap","console","log","router","variant","catch","message","autoHideDuration","factory","amount","toFixed","coinTimeout","setTimeout","clearTimeout"],"mappings":"6TAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,OACEC,SADF,CAEEC,IAFF,CAGEC,UAHF,CAIEC,UAJF,CAKEC,KALF,CAMEC,UANF,KAOO,mBAPP,CAQA,MAAOC,CAAAA,sBAAP,KAAmC,uCAAnC,CACA,OAASC,WAAT,KAA4B,WAA5B,CACA,MAAOC,CAAAA,QAAP,KAAqB,yBAArB,CACA,OACEC,UADF,CAEEC,UAFF,CAGEC,WAHF,CAIEC,SAJF,CAKEC,SALF,CAMEC,UANF,CAOEC,YAPF,CAQEC,mBARF,CASEC,OATF,CAUEC,UAVF,CAWEC,WAXF,KAYO,sBAZP,CAaA,MAAOC,CAAAA,SAAP,KAAsB,aAAtB,CACA,MAAOC,CAAAA,UAAP,KAAuB,cAAvB,CACA,MAAOC,CAAAA,aAAP,KAA0B,6BAA1B,CACA,MAAOC,CAAAA,YAAP,KAAyB,4BAAzB,CACA,MAAOC,CAAAA,KAAP,KAAkB,oBAAlB,CACA,MAAO,GAAKC,CAAAA,MAAZ,KAAwB,qBAAxB,C,wFAEA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAACC,KAAD,QAAY,CACzBC,cAAc,CAAE,CACdC,YAAY,CAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADA,CAEdC,OAAO,CAAEJ,KAAK,CAACG,OAAN,CAAc,CAAd,CAFK,CAGdE,aAAa,CAAEL,KAAK,CAACG,OAAN,CAAc,CAAd,CAHD,CAIdG,eAAe,CAAC,yBAJF,CADS,CAOzBC,YAAY,CAAE,CACZC,MAAM,CAAE,CADI,CAEZC,MAAM,CAAE,OAFI,CAGZL,OAAO,CAAEJ,KAAK,CAACG,OAAN,CAAc,GAAd,CAHG,CAPW,CAYzBO,SAAS,CAAE,CACTC,KAAK,CAAE,MADE,CAZc,CAezBC,KAAK,CAAE,CACLC,SAAS,CAAE,QADN,CAELT,OAAO,CAAEJ,KAAK,CAACG,OAAN,CAAc,GAAd,CAFJ,CAGLW,YAAY,CAAEd,KAAK,CAACG,OAAN,CAAc,CAAd,CAHT,CAILY,KAAK,CAAC,MAJD,CAKLC,UAAU,CAAC,KALN,CAMLC,QAAQ,CAAC,MANJ,CAfkB,CAuBzBC,EAAE,CAAE,CACFP,KAAK,CAAE,MADL,CAvBqB,CA0BzBQ,OAAO,CAAE,CACPf,OAAO,CAAEJ,KAAK,CAACG,OAAN,CAAc,CAAd,CADF,CAEPiB,QAAQ,CAAE,MAFH,CAGPP,SAAS,CAAE,QAHJ,CA1BgB,CA+BzBQ,MAAM,CAAE,CACNC,SAAS,CAAE,OADL,CA/BiB,CAAZ,EAAf,CAoCA,GAAMC,CAAAA,SAAS,CAAG/C,UAAU,CAACuB,MAAD,CAA5B,CAEA,QAASyB,CAAAA,WAAT,CAAqBC,KAArB,CAA4B,CAC1B,GAAMC,CAAAA,OAAO,CAAGH,SAAS,EAAzB,CAD0B,iBAEE3C,WAAW,EAFb,CAElB+C,eAFkB,cAElBA,eAFkB,CAI1B;AAJ0B,oBAKYxD,KAAK,CAACyD,QAAN,CAAe,KAAf,CALZ,oDAKnBC,WALmB,qBAKNC,cALM,0CAMY3D,KAAK,CAACyD,QAAN,CAAe,KAAf,CANZ,qDAMnBG,WANmB,qBAMNC,cANM,0CAOsB7D,KAAK,CAACyD,QAAN,CAAe,KAAf,CAPtB,qDAOnBK,gBAPmB,qBAODC,mBAPC,qBAS1B;AAT0B,qBAUA/D,KAAK,CAACyD,QAAN,CAAe,CACvCO,OAAO,CAAEC,SAD8B,CAEvCC,MAAM,CAAED,SAF+B,CAGvCjB,OAAO,CAAEiB,SAH8B,CAAf,CAVA,qDAUnBE,KAVmB,qBAUZC,QAVY,0CAeApE,KAAK,CAACyD,QAAN,CAAe,CACvCO,OAAO,CAAEC,SAD8B,CAEvCC,MAAM,CAAED,SAF+B,CAGvCjB,OAAO,CAAEiB,SAH8B,CAAf,CAfA,sDAenBI,KAfmB,sBAeZC,QAfY,sBAqB1B;AArB0B,sBAsBMtE,KAAK,CAACyD,QAAN,CAAe,CAAC,KAAD,CAAQ,KAAR,CAAf,CAtBN,uDAsBnBc,QAtBmB,sBAsBTC,WAtBS,sBAwB1B;AAxB0B,sBAyBYxE,KAAK,CAACyD,QAAN,CAAe,EAAf,CAzBZ,uDAyBnBgB,WAzBmB,sBAyBNC,cAzBM,4CA0BY1E,KAAK,CAACyD,QAAN,CAAe,EAAf,CA1BZ,uDA0BnBkB,WA1BmB,sBA0BNC,cA1BM,sBA4B1B;AA5B0B,sBA6BI5E,KAAK,CAACyD,QAAN,CAAe,KAAf,CA7BJ,uDA6BnBoB,OA7BmB,sBA6BVC,UA7BU,sBA+B1B;AACA;AACA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,EAAM,CACzBX,QAAQ,CAACC,KAAD,CAAR,CACAC,QAAQ,CAACH,KAAD,CAAR,CACAO,cAAc,CAACC,WAAD,CAAd,CACAH,WAAW,CAACD,QAAQ,CAACS,OAAT,EAAD,CAAX,CACD,CALD,CAOA;AACA,GAAMC,CAAAA,YAAY,CAAG,CACnBC,MAAM,CAAE,gBAACC,CAAD,CAAO,CACbT,cAAc,CAACS,CAAC,CAACC,MAAF,CAASC,KAAV,CAAd,CACD,CAHkB,CAArB,CAMA;AACA,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACtC,OAAD,CAAUkB,MAAV,CAAqB,CACzC,GAAIlB,OAAO,EAAIkB,MAAf,CACE,MAAOqB,CAAAA,UAAU,CAACvC,OAAD,CAAV,CAAoBwC,WAApB,CAAgC,CAAhC,EAAqC,GAArC,CAA2CtB,MAAlD,CADF,IAEK,OAAO,KAAP,CACN,CAJD,CAMA;AACA,GAAMuB,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACC,OAAD,CAAUxB,MAAV,CAAqB,CACzC,GAAIwB,OAAO,EAAIxB,MAAf,CAAuB,MAAOwB,CAAAA,OAAO,CAAG,GAAV,CAAgBxB,MAAvB,CAAvB,IACK,OAAO,KAAP,CACN,CAHD,CAKA;AACA,GAAMyB,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,EAAM,CAE5B;AACA,GAAMC,CAAAA,YAAY,CAAGL,UAAU,CAACd,WAAD,CAA/B,CACA,GAAMoB,CAAAA,YAAY,CAAGN,UAAU,CAACZ,WAAD,CAA/B,CACA,MACER,CAAAA,KAAK,CAACH,OAAN,EACAK,KAAK,CAACL,OADN,EAEA,CAAC8B,KAAK,CAACF,YAAD,CAFN,EAGA,CAACE,KAAK,CAACD,YAAD,CAHN,EAIA,EAAID,YAJJ,EAKAA,YAAY,EAAIzB,KAAK,CAACnB,OANxB,CAQD,CAbD,CAeA;AACA,GAAM+C,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAAC/B,OAAD,CAAa,CACpC;AACAL,cAAc,CAAC,KAAD,CAAd,CAEA;AACA,GAAIK,OAAO,GAAKK,KAAK,CAACL,OAAtB,CAA+B,CAC7Be,YAAY,GACb,CACD;AAHA,IAIK,IAAIf,OAAJ,CAAa,CAChB;AACA9C,mBAAmB,CAACoC,KAAK,CAAC0C,OAAN,CAAcC,OAAf,CAAwBjC,OAAxB,CAAiCV,KAAK,CAAC0C,OAAN,CAAcE,QAA/C,CAAyD5C,KAAK,CAAC0C,OAAN,CAAcG,MAAvE,CAA+E7C,KAAK,CAAC0C,OAAN,CAAcI,IAAd,CAAmBpC,OAAlG,CAA2GV,KAAK,CAAC0C,OAAN,CAAcK,KAAzH,CAAnB,CAAmJC,IAAnJ,CAAwJ,SAACC,IAAD,CAAU,CAChKnC,QAAQ,CAAC,CACPJ,OAAO,CAAEA,OADF,CAEPE,MAAM,CAAEqC,IAAI,CAACrC,MAFN,CAGPlB,OAAO,CAAEuD,IAAI,CAACvD,OAHP,CAAD,CAAR,CAKD,CAND,EAOD,CACF,CAnBD,CAqBA;AACA,GAAMwD,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACxC,OAAD,CAAa,CACpC;AACAH,cAAc,CAAC,KAAD,CAAd,CAEA;AACA,GAAIG,OAAO,GAAKG,KAAK,CAACH,OAAtB,CAA+B,CAC7Be,YAAY,GACb,CACD;AAHA,IAIK,IAAIf,OAAJ,CAAa,CAChB;AACA9C,mBAAmB,CAACoC,KAAK,CAAC0C,OAAN,CAAcC,OAAf,CAAwBjC,OAAxB,CAAiCV,KAAK,CAAC0C,OAAN,CAAcE,QAA/C,CAAyD5C,KAAK,CAAC0C,OAAN,CAAcG,MAAvE,CAA+E7C,KAAK,CAAC0C,OAAN,CAAcI,IAAd,CAAmBpC,OAAlG,CAA2GV,KAAK,CAAC0C,OAAN,CAAcK,KAAzH,CAAnB,CAAmJC,IAAnJ,CAAwJ,SAACC,IAAD,CAAU,CAChKjC,QAAQ,CAAC,CACPN,OAAO,CAAEA,OADF,CAEPE,MAAM,CAAEqC,IAAI,CAACrC,MAFN,CAGPlB,OAAO,CAAEuD,IAAI,CAACvD,OAHP,CAAD,CAAR,CAKD,CAND,EAOD,CACF,CAnBD,CAqBA;AACA,GAAMyD,CAAAA,IAAI,CAAG,QAAPA,CAAAA,IAAO,EAAM,CACjBC,OAAO,CAACC,GAAR,CAAY,8BAAZ,EACA7B,UAAU,CAAC,IAAD,CAAV,CAEA1D,UAAU,CACR+C,KAAK,CAACH,OADE,CAERK,KAAK,CAACL,OAFE,CAGRS,WAHQ,CAIRnB,KAAK,CAAC0C,OAAN,CAAcY,MAJN,CAKRtD,KAAK,CAAC0C,OAAN,CAAcC,OALN,CAMR3C,KAAK,CAAC0C,OAAN,CAAcG,MANN,CAAV,CAQGG,IARH,CAQQ,UAAM,CACVxB,UAAU,CAAC,KAAD,CAAV,CAEA;AACAJ,cAAc,CAAC,EAAD,CAAd,CACAlB,eAAe,CAAC,wBAAD,CAA2B,CAAEqD,OAAO,CAAE,SAAX,CAA3B,CAAf,CACD,CAdH,EAeGC,KAfH,CAeS,SAAC3B,CAAD,CAAO,CACZL,UAAU,CAAC,KAAD,CAAV,CACAtB,eAAe,CAAC,uBAAyB2B,CAAC,CAAC4B,OAA3B,CAAqC,GAAtC,CAA2C,CACxDF,OAAO,CAAE,OAD+C,CAExDG,gBAAgB,CAAE,KAFsC,CAA3C,CAAf,CAID,CArBH,EAsBD,CA1BD,CA4BA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA/G,SAAS,CAAC,UAAM,CACdyG,OAAO,CAACC,GAAR,CACE,oCAAsCxC,KAAK,CAACH,OAA5C,CAAsD,IAAtD,CAA6DK,KAAK,CAACL,OADrE,EAIA,GAAIG,KAAK,CAACH,OAAN,EAAiBK,KAAK,CAACL,OAA3B,CAAoC,CAClC3C,WAAW,CAAC8C,KAAK,CAACH,OAAP,CAAgBK,KAAK,CAACL,OAAtB,CAA+BV,KAAK,CAAC0C,OAAN,CAAciB,OAA7C,CAAsD3D,KAAK,CAAC0C,OAAN,CAAcG,MAApE,CAA4E7C,KAAK,CAAC0C,OAAN,CAAcC,OAA1F,CAAX,CAA8GK,IAA9G,CACE,SAACC,IAAD,QAAU/B,CAAAA,WAAW,CAAC+B,IAAD,CAArB,EADF,EAGD,CACF,CAVQ,CAUN,CAACpC,KAAK,CAACH,OAAP,CAAgBK,KAAK,CAACL,OAAtB,CAA+BV,KAAK,CAAC0C,OAAN,CAAcC,OAA7C,CAAsD3C,KAAK,CAAC0C,OAAN,CAAciB,OAApE,CAA6E3D,KAAK,CAAC0C,OAAN,CAAcY,MAA3F,CAAmGtD,KAAK,CAAC0C,OAAN,CAAcG,MAAjH,CAVM,CAAT,CAYA;AACA;AACA;AACA;AACAlG,SAAS,CAAC,UAAM,CACd,GAAI6F,KAAK,CAACP,UAAU,CAACd,WAAD,CAAX,CAAT,CAAoC,CAClCG,cAAc,CAAC,EAAD,CAAd,CACD,CAFD,IAEO,IAAIW,UAAU,CAACd,WAAD,CAAV,EAA2BN,KAAK,CAACH,OAAjC,EAA4CK,KAAK,CAACL,OAAtD,CAA+D,CACpE/C,YAAY,CAACkD,KAAK,CAACH,OAAP,CAAgBK,KAAK,CAACL,OAAtB,CAA+BS,WAA/B,CAA4CnB,KAAK,CAAC0C,OAAN,CAAcY,MAA1D,CAAkEtD,KAAK,CAAC0C,OAAN,CAAcG,MAAhF,CAAZ,CAAoGG,IAApG,CACE,SAACY,MAAD,QAAYtC,CAAAA,cAAc,CAACsC,MAAM,CAACC,OAAP,CAAe,CAAf,CAAD,CAA1B,EADF,EAEEL,KAFF,CAEQ,SAAA3B,CAAC,CAAI,CACXuB,OAAO,CAACC,GAAR,CAAYxB,CAAZ,EACAP,cAAc,CAAC,IAAD,CAAd,CACD,CALD,EAMD,CAPM,IAOA,CACLA,cAAc,CAAC,EAAD,CAAd,CACD,CACF,CAbQ,CAaN,CAACH,WAAD,CAAcN,KAAK,CAACH,OAApB,CAA6BK,KAAK,CAACL,OAAnC,CAbM,CAAT,CAeA;AACA;AACA/D,SAAS,CAAC,UAAM,CACd,GAAMmH,CAAAA,WAAW,CAAGC,UAAU,CAAC,UAAM,CACnCX,OAAO,CAACC,GAAR,CAAY,SAAZ,CAAuBrD,KAAvB,EACAoD,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAEA,GAAIxC,KAAK,CAACH,OAAN,EAAiBK,KAAK,CAACL,OAAvB,EAAkCV,KAAK,CAAC0C,OAAN,CAAcC,OAApD,CAA6D,CAC3D5E,WAAW,CACT8C,KAAK,CAACH,OADG,CAETK,KAAK,CAACL,OAFG,CAGTV,KAAK,CAAC0C,OAAN,CAAciB,OAHL,CAIT3D,KAAK,CAAC0C,OAAN,CAAcG,MAJL,CAKT7C,KAAK,CAAC0C,OAAN,CAAcC,OALL,CAAX,CAMEK,IANF,CAMO,SAACC,IAAD,QAAU/B,CAAAA,WAAW,CAAC+B,IAAD,CAArB,EANP,EAOD,CAED,GAAIpC,KAAK,CAACH,OAAN,EAAiBV,KAAK,CAAC0C,OAAN,CAAcC,OAA/B,EAAyC,CAACnC,gBAA9C,CAAgE,CAC9D5C,mBAAmB,CACjBoC,KAAK,CAAC0C,OAAN,CAAcC,OADG,CAEjB9B,KAAK,CAACH,OAFW,CAGjBV,KAAK,CAAC0C,OAAN,CAAcE,QAHG,CAIjB5C,KAAK,CAAC0C,OAAN,CAAcG,MAJG,CAKjB7C,KAAK,CAAC0C,OAAN,CAAcI,IAAd,CAAmBpC,OALF,CAMjBV,KAAK,CAAC0C,OAAN,CAAcK,KANG,CAAnB,CAOIC,IAPJ,CAQE,SAACC,IAAD,CAAU,CACRnC,QAAQ,gCACHD,KADG,MAENnB,OAAO,CAAEuD,IAAI,CAACvD,OAFR,GAAR,CAID,CAbH,EAeD,CACD,GAAIqB,KAAK,CAACL,OAAN,EAAiBV,KAAK,CAAC0C,OAAN,CAAcC,OAA/B,EAAyC,CAACnC,gBAA9C,CAAgE,CAC9D5C,mBAAmB,CACjBoC,KAAK,CAAC0C,OAAN,CAAcC,OADG,CAEjB5B,KAAK,CAACL,OAFW,CAGjBV,KAAK,CAAC0C,OAAN,CAAcE,QAHG,CAIjB5C,KAAK,CAAC0C,OAAN,CAAcG,MAJG,CAKjB7C,KAAK,CAAC0C,OAAN,CAAcI,IAAd,CAAmBpC,OALF,CAMjBV,KAAK,CAAC0C,OAAN,CAAcK,KANG,CAAnB,CAOIC,IAPJ,CAQE,SAACC,IAAD,CAAU,CACRjC,QAAQ,gCACHD,KADG,MAENrB,OAAO,CAAEuD,IAAI,CAACvD,OAFR,GAAR,CAID,CAbH,EAeD,CACF,CAhD6B,CAgD3B,KAhD2B,CAA9B,CAkDA,MAAO,kBAAMsE,CAAAA,YAAY,CAACF,WAAD,CAAlB,EAAP,CACD,CApDQ,CAAT,CAsDA,mBACE,oCAEE,KAAC,UAAD,EACE,IAAI,CAAE1D,WADR,CAEE,OAAO,CAAEqC,gBAFX,CAGE,KAAK,CAAEzC,KAAK,CAAC0C,OAAN,CAAcK,KAHvB,CAIE,KAAK,CAAE/C,KAAK,CAAC0C,OAAN,CAAcG,MAJvB,EAFF,cAQE,KAAC,UAAD,EACE,IAAI,CAAEvC,WADR,CAEE,OAAO,CAAE4C,gBAFX,CAGE,KAAK,CAAElD,KAAK,CAAC0C,OAAN,CAAcK,KAHvB,CAIE,MAAM,CAAE/C,KAAK,CAAC0C,OAAN,CAAcG,MAJxB,EARF,cAcE,KAAC,YAAD,EACE,IAAI,CAAErC,gBADR,EAdF,cAmBE,KAAC,SAAD,EAAW,QAAQ,CAAC,IAApB,uBACE,MAAC,KAAD,EAAO,SAAS,CAAEP,OAAO,CAACzB,cAA1B,wBACE,KAAC,UAAD,EAAY,OAAO,CAAC,IAApB,CAAyB,SAAS,CAAEyB,OAAO,CAACd,KAA5C,wBADF,cAKE,MAAC,IAAD,EAAM,SAAS,KAAf,CAAgB,SAAS,CAAC,QAA1B,CAAmC,UAAU,CAAC,QAA9C,CAAuD,OAAO,CAAE,CAAhE,wBACE,KAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,EAAf,CAAmB,SAAS,CAAEc,OAAO,CAAChB,SAAtC,uBACE,KAAC,SAAD,EACE,WAAW,CAAE,IADf,CAEE,KAAK,CAAEkC,WAFT,CAGE,OAAO,CAAE,yBAAMd,CAAAA,cAAc,CAAC,IAAD,CAApB,EAHX,CAIE,QAAQ,CAAEsB,YAAY,CAACC,MAJzB,CAKE,MAAM,CAAEf,KAAK,CAACD,MAAN,GAAiBD,SAAjB,CAA6BE,KAAK,CAACD,MAAnC,CAA4C,QALtD,EADF,EADF,cAWE,KAAC,UAAD,EAAY,OAAO,CAAEa,YAArB,CAAmC,SAAS,CAAExB,OAAO,CAACnB,YAAtD,uBACE,KAAC,sBAAD,EAAwB,QAAQ,CAAC,QAAjC,CAA0C,SAAS,CAAC,eAApD,EADF,EAXF,cAeE,KAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,EAAf,CAAmB,SAAS,CAAEmB,OAAO,CAAChB,SAAtC,uBACE,KAAC,SAAD,EACE,WAAW,CAAE,KADf,CAEE,KAAK,CAAEoC,WAFT,CAGE,OAAO,CAAE,yBAAMd,CAAAA,cAAc,CAAC,IAAD,CAApB,EAHX,CAIE,MAAM,CAAEQ,KAAK,CAACH,MAAN,GAAiBD,SAAjB,CAA6BI,KAAK,CAACH,MAAnC,CAA4C,QAJtD,EADF,EAfF,cAwBE,WAAI,SAAS,CAAEX,OAAO,CAACR,EAAvB,EAxBF,cA2BE,KAAC,UAAD,EAAY,OAAO,CAAC,IAApB,CAAyB,SAAS,CAAC,gBAAnC,2BA3BF,cA4BE,MAAC,IAAD,EAAM,SAAS,KAAf,CAAgB,SAAS,CAAC,KAA1B,CAAgC,cAAc,CAAC,eAA/C,wBACE,KAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,CAAf,uBACE,KAAC,UAAD,EAAY,OAAO,CAAC,OAApB,CAA4B,SAAS,WAAKQ,OAAO,CAACP,OAAb,iBAArC,UACGsC,aAAa,CAACnB,KAAK,CAACnB,OAAP,CAAgBmB,KAAK,CAACD,MAAtB,CADhB,EADF,EADF,cAME,KAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,CAAf,uBACE,KAAC,UAAD,EAAY,OAAO,CAAC,OAApB,CAA4B,SAAS,WAAKX,OAAO,CAACP,OAAb,iBAArC,UACGsC,aAAa,CAACjB,KAAK,CAACrB,OAAP,CAAgBqB,KAAK,CAACH,MAAtB,CADhB,EADF,EANF,GA5BF,cAyCE,WAAI,SAAS,CAAEX,OAAO,CAACR,EAAvB,EAzCF,cA4CE,KAAC,UAAD,EAAY,OAAO,CAAC,IAApB,CAAyB,SAAS,CAAC,gBAAnC,sBA5CF,cA6CE,MAAC,IAAD,EAAM,SAAS,KAAf,CAAgB,SAAS,CAAC,KAA1B,CAAgC,cAAc,CAAC,eAA/C,wBACE,KAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,CAAf,uBACE,KAAC,UAAD,EAAY,OAAO,CAAC,OAApB,CAA4B,SAAS,WAAKQ,OAAO,CAACP,OAAb,iBAArC,UACGyC,aAAa,CAAClB,QAAQ,CAAC,CAAD,CAAT,CAAcJ,KAAK,CAACD,MAApB,CADhB,EADF,EADF,cAME,KAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,CAAf,uBACE,KAAC,UAAD,EAAY,OAAO,CAAC,OAApB,CAA4B,SAAS,WAAKX,OAAO,CAACP,OAAb,iBAArC,UACGyC,aAAa,CAAClB,QAAQ,CAAC,CAAD,CAAT,CAAcF,KAAK,CAACH,MAApB,CADhB,EADF,EANF,GA7CF,cA0DE,WAAI,SAAS,CAAEX,OAAO,CAACR,EAAvB,EA1DF,cA4DE,MAAC,aAAD,EACE,OAAO,CAAE8B,OADX,CAEE,KAAK,CAAEc,eAAe,EAFxB,CAGE,OAAO,CAAE,KAHX,CAIE,IAAI,CAAE,KAJR,CAKE,OAAO,CAAEc,IALX,wBAOE,KAAC,QAAD,IAPF,UA5DF,GALF,GADF,EAnBF,GADF,CAqGD,CAED,cAAepD,CAAAA,WAAf","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport {\r\n  Container,\r\n  Grid,\r\n  IconButton,\r\n  makeStyles,\r\n  Paper,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport SwapVerticalCircleIcon from \"@material-ui/icons/SwapVerticalCircle\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport LoopIcon from \"@material-ui/icons/Loop\";\r\nimport {\r\n  getAccount,\r\n  getFactory,\r\n  getProvider,\r\n  getRouter,\r\n  getSigner,\r\n  getNetwork,\r\n  getAmountOut,\r\n  getBalanceAndSymbol,\r\n  getWeth,\r\n  swapTokens,\r\n  getReserves,\r\n} from \"../ethereumFunctions\";\r\nimport CoinField from \"./CoinField\";\r\nimport CoinDialog from \"./CoinDialog\";\r\nimport LoadingButton from \"../Components/LoadingButton\";\r\nimport WrongNetwork from \"../Components/wrongNetwork\";\r\nimport COINS from \"../constants/coins\";\r\nimport * as chains from \"../constants/chains\";\r\n\r\nconst styles = (theme) => ({\r\n  paperContainer: {\r\n    borderRadius: theme.spacing(2),\r\n    padding: theme.spacing(1),\r\n    paddingBottom: theme.spacing(3),\r\n    backgroundColor:\"rgba(102, 16, 242, 1.0)\",\r\n  },\r\n  switchButton: {\r\n    zIndex: 1,\r\n    margin: \"-16px\",\r\n    padding: theme.spacing(0.5),\r\n  },\r\n  fullWidth: {\r\n    width: \"100%\",\r\n  },\r\n  title: {\r\n    textAlign: \"center\",\r\n    padding: theme.spacing(0.5),\r\n    marginBottom: theme.spacing(1),\r\n    color:\"#fff\",\r\n    fontWeight:'900',\r\n    fontSize:'48px'\r\n  },\r\n  hr: {\r\n    width: \"100%\",\r\n  },\r\n  balance: {\r\n    padding: theme.spacing(1),\r\n    overflow: \"wrap\",\r\n    textAlign: \"center\",\r\n  },\r\n  footer: {\r\n    marginTop: \"285px\",\r\n  },\r\n});\r\n\r\nconst useStyles = makeStyles(styles);\r\n\r\nfunction CoinSwapper(props) {\r\n  const classes = useStyles();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  // Stores a record of whether their respective dialog window is open\r\n  const [dialog1Open, setDialog1Open] = React.useState(false);\r\n  const [dialog2Open, setDialog2Open] = React.useState(false);\r\n  const [wrongNetworkOpen, setwrongNetworkOpen] = React.useState(false);\r\n\r\n  // Stores data about their respective coin\r\n  const [coin1, setCoin1] = React.useState({\r\n    address: undefined,\r\n    symbol: undefined,\r\n    balance: undefined,\r\n  });\r\n  const [coin2, setCoin2] = React.useState({\r\n    address: undefined,\r\n    symbol: undefined,\r\n    balance: undefined,\r\n  });\r\n\r\n  // Stores the current reserves in the liquidity pool between coin1 and coin2\r\n  const [reserves, setReserves] = React.useState([\"0.0\", \"0.0\"]);\r\n\r\n  // Stores the current value of their respective text box\r\n  const [field1Value, setField1Value] = React.useState(\"\");\r\n  const [field2Value, setField2Value] = React.useState(\"\");\r\n\r\n  // Controls the loading button\r\n  const [loading, setLoading] = React.useState(false);\r\n\r\n  // Switches the top and bottom coins, this is called when users hit the swap button or select the opposite\r\n  // token in the dialog (e.g. if coin1 is TokenA and the user selects TokenB when choosing coin2)\r\n  const switchFields = () => {\r\n    setCoin1(coin2);\r\n    setCoin2(coin1);\r\n    setField1Value(field2Value);\r\n    setReserves(reserves.reverse());\r\n  };\r\n\r\n  // These functions take an HTML event, pull the data out and puts it into a state variable.\r\n  const handleChange = {\r\n    field1: (e) => {\r\n      setField1Value(e.target.value);\r\n    },\r\n  };\r\n\r\n  // Turns the account's balance into something nice and readable\r\n  const formatBalance = (balance, symbol) => {\r\n    if (balance && symbol)\r\n      return parseFloat(balance).toPrecision(8) + \" \" + symbol;\r\n    else return \"0.0\";\r\n  };\r\n\r\n  // Turns the coin's reserves into something nice and readable\r\n  const formatReserve = (reserve, symbol) => {\r\n    if (reserve && symbol) return reserve + \" \" + symbol;\r\n    else return \"0.0\";\r\n  };\r\n\r\n  // Determines whether the button should be enabled or not\r\n  const isButtonEnabled = () => {\r\n\r\n    // If both coins have been selected, and a valid float has been entered which is less than the user's balance, then return true\r\n    const parsedInput1 = parseFloat(field1Value);\r\n    const parsedInput2 = parseFloat(field2Value);\r\n    return (\r\n      coin1.address &&\r\n      coin2.address &&\r\n      !isNaN(parsedInput1) &&\r\n      !isNaN(parsedInput2) &&\r\n      0 < parsedInput1 &&\r\n      parsedInput1 <= coin1.balance\r\n    );\r\n  };\r\n\r\n  // Called when the dialog window for coin1 exits\r\n  const onToken1Selected = (address) => {\r\n    // Close the dialog window\r\n    setDialog1Open(false);\r\n\r\n    // If the user inputs the same token, we want to switch the data in the fields\r\n    if (address === coin2.address) {\r\n      switchFields();\r\n    }\r\n    // We only update the values if the user provides a token\r\n    else if (address) {\r\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\r\n      getBalanceAndSymbol(props.network.account, address, props.network.provider, props.network.signer, props.network.weth.address, props.network.coins).then((data) => {\r\n        setCoin1({\r\n          address: address,\r\n          symbol: data.symbol,\r\n          balance: data.balance,\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  // Called when the dialog window for coin2 exits\r\n  const onToken2Selected = (address) => {\r\n    // Close the dialog window\r\n    setDialog2Open(false);\r\n\r\n    // If the user inputs the same token, we want to switch the data in the fields\r\n    if (address === coin1.address) {\r\n      switchFields();\r\n    }\r\n    // We only update the values if the user provides a token\r\n    else if (address) {\r\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\r\n      getBalanceAndSymbol(props.network.account, address, props.network.provider, props.network.signer, props.network.weth.address, props.network.coins).then((data) => {\r\n        setCoin2({\r\n          address: address,\r\n          symbol: data.symbol,\r\n          balance: data.balance,\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  // Calls the swapTokens Ethereum function to make the swap, then resets nessicary state variables\r\n  const swap = () => {\r\n    console.log(\"Attempting to swap tokens...\");\r\n    setLoading(true);\r\n\r\n    swapTokens(\r\n      coin1.address,\r\n      coin2.address,\r\n      field1Value,\r\n      props.network.router,\r\n      props.network.account,\r\n      props.network.signer\r\n    )\r\n      .then(() => {\r\n        setLoading(false);\r\n\r\n        // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\r\n        setField1Value(\"\");\r\n        enqueueSnackbar(\"Transaction Successful\", { variant: \"success\" });\r\n      })\r\n      .catch((e) => {\r\n        setLoading(false);\r\n        enqueueSnackbar(\"Transaction Failed (\" + e.message + \")\", {\r\n          variant: \"error\",\r\n          autoHideDuration: 10000,\r\n        });\r\n      });\r\n  };\r\n\r\n  // The lambdas within these useEffects will be called when a particular dependency is updated. These dependencies\r\n  // are defined in the array of variables passed to the function after the lambda expression. If there are no dependencies\r\n  // the lambda will only ever be called when the component mounts. These are very useful for calculating new values\r\n  // after a particular state change, for example, calculating the new exchange rate whenever the addresses\r\n  // of the two coins change.\r\n\r\n  // This hook is called when either of the state variables `coin1.address` or `coin2.address` change.\r\n  // This means that when the user selects a different coin to convert between, or the coins are swapped,\r\n  // the new reserves will be calculated.\r\n  useEffect(() => {\r\n    console.log(\r\n      \"Trying to get Reserves between:\\n\" + coin1.address + \"\\n\" + coin2.address\r\n    );\r\n\r\n    if (coin1.address && coin2.address) {\r\n      getReserves(coin1.address, coin2.address, props.network.factory, props.network.signer, props.network.account).then(\r\n        (data) => setReserves(data)\r\n      );\r\n    }\r\n  }, [coin1.address, coin2.address, props.network.account, props.network.factory, props.network.router, props.network.signer]);\r\n\r\n  // This hook is called when either of the state variables `field1Value` `coin1.address` or `coin2.address` change.\r\n  // It attempts to calculate and set the state variable `field2Value`\r\n  // This means that if the user types a new value into the conversion box or the conversion rate changes,\r\n  // the value in the output box will change.\r\n  useEffect(() => {\r\n    if (isNaN(parseFloat(field1Value))) {\r\n      setField2Value(\"\");\r\n    } else if (parseFloat(field1Value) && coin1.address && coin2.address) {\r\n      getAmountOut(coin1.address, coin2.address, field1Value, props.network.router, props.network.signer).then(\r\n        (amount) => setField2Value(amount.toFixed(7))\r\n      ).catch(e => {\r\n        console.log(e);\r\n        setField2Value(\"NA\");\r\n      })\r\n    } else {\r\n      setField2Value(\"\");\r\n    }\r\n  }, [field1Value, coin1.address, coin2.address]);\r\n\r\n  // This hook creates a timeout that will run every ~10 seconds, it's role is to check if the user's balance has\r\n  // updated has changed. This allows them to see when a transaction completes by looking at the balance output.\r\n  useEffect(() => {\r\n    const coinTimeout = setTimeout(() => {\r\n      console.log('props: ', props);\r\n      console.log(\"Checking balances...\");\r\n\r\n      if (coin1.address && coin2.address && props.network.account) {\r\n        getReserves(\r\n          coin1.address,\r\n          coin2.address,\r\n          props.network.factory,\r\n          props.network.signer,\r\n          props.network.account\r\n        ).then((data) => setReserves(data));\r\n      }\r\n\r\n      if (coin1.address && props.network.account &&!wrongNetworkOpen) {\r\n        getBalanceAndSymbol(\r\n          props.network.account,\r\n          coin1.address,\r\n          props.network.provider,\r\n          props.network.signer,\r\n          props.network.weth.address,\r\n          props.network.coins\r\n          ).then(\r\n          (data) => {\r\n            setCoin1({\r\n              ...coin1,\r\n              balance: data.balance,\r\n            });\r\n          }\r\n        );\r\n      }\r\n      if (coin2.address && props.network.account &&!wrongNetworkOpen) {\r\n        getBalanceAndSymbol(\r\n          props.network.account,\r\n          coin2.address,\r\n          props.network.provider,\r\n          props.network.signer,\r\n          props.network.weth.address,\r\n          props.network.coins\r\n          ).then(\r\n          (data) => {\r\n            setCoin2({\r\n              ...coin2,\r\n              balance: data.balance,\r\n            });\r\n          }\r\n        );\r\n      }\r\n    }, 10000);\r\n\r\n    return () => clearTimeout(coinTimeout);\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      {/* Dialog Windows */}\r\n      <CoinDialog\r\n        open={dialog1Open}\r\n        onClose={onToken1Selected}\r\n        coins={props.network.coins}\r\n        props={props.network.signer}\r\n      />\r\n      <CoinDialog\r\n        open={dialog2Open}\r\n        onClose={onToken2Selected}\r\n        coins={props.network.coins}\r\n        signer={props.network.signer}\r\n      />\r\n      <WrongNetwork\r\n        open={wrongNetworkOpen}\r\n        />\r\n\r\n      {/* Coin Swapper */}\r\n      <Container maxWidth=\"xs\">\r\n        <Paper className={classes.paperContainer}>\r\n          <Typography variant=\"h5\" className={classes.title}>\r\n            Swap Coins\r\n          </Typography>\r\n\r\n          <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\r\n            <Grid item xs={12} className={classes.fullWidth}>\r\n              <CoinField\r\n                activeField={true}\r\n                value={field1Value}\r\n                onClick={() => setDialog1Open(true)}\r\n                onChange={handleChange.field1}\r\n                symbol={coin1.symbol !== undefined ? coin1.symbol : \"Select\"}\r\n              />\r\n            </Grid>\r\n\r\n            <IconButton onClick={switchFields} className={classes.switchButton}>\r\n              <SwapVerticalCircleIcon fontSize=\"medium\" className=\"swapperButton\" />\r\n            </IconButton>\r\n\r\n            <Grid item xs={12} className={classes.fullWidth}>\r\n              <CoinField\r\n                activeField={false}\r\n                value={field2Value}\r\n                onClick={() => setDialog2Open(true)}\r\n                symbol={coin2.symbol !== undefined ? coin2.symbol : \"Select\"}\r\n              />\r\n            </Grid>\r\n\r\n            <hr className={classes.hr} />\r\n\r\n            {/* Balance Display */}\r\n            <Typography variant=\"h6\" className=\"balanceHeading\">Your Balances</Typography>\r\n            <Grid container direction=\"row\" justifyContent=\"space-between\">\r\n              <Grid item xs={6}>\r\n                <Typography variant=\"body1\" className={`${classes.balance} balance-text`} >\r\n                  {formatBalance(coin1.balance, coin1.symbol)}\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <Typography variant=\"body1\" className={`${classes.balance} balance-text`}>\r\n                  {formatBalance(coin2.balance, coin2.symbol)}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            <hr className={classes.hr} />\r\n\r\n            {/* Reserves Display */}\r\n            <Typography variant=\"h6\" className=\"balanceHeading\">Reserves</Typography>\r\n            <Grid container direction=\"row\" justifyContent=\"space-between\">\r\n              <Grid item xs={6}>\r\n                <Typography variant=\"body1\" className={`${classes.balance} balance-text`}>\r\n                  {formatReserve(reserves[0], coin1.symbol)}\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <Typography variant=\"body1\" className={`${classes.balance} balance-text`}>\r\n                  {formatReserve(reserves[1], coin2.symbol)}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            <hr className={classes.hr} />\r\n\r\n            <LoadingButton\r\n              loading={loading}\r\n              valid={isButtonEnabled()}\r\n              success={false}\r\n              fail={false}\r\n              onClick={swap}\r\n            >\r\n              <LoopIcon />\r\n              Swap\r\n            </LoadingButton>\r\n          </Grid>\r\n        </Paper>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CoinSwapper;"]},"metadata":{},"sourceType":"module"}